// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  @@map("categories")
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  cost        Decimal? @db.Decimal(10, 2)
  sku         String  @unique
  barcode     String? @unique
  stock       Int     @default(0)
  minStock    Int     @default(5)
  isActive    Boolean @default(true)
  imageUrl    String?
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category         Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  transactionItems TransactionItem[]

  // Indexes
  @@index([categoryId])
  @@index([sku])
  @@index([barcode])
  @@index([isActive])
  @@map("products")
}

model Transaction {
  id                String            @id @default(cuid())
  transactionNumber String            @unique
  customerName      String
  customerPhone     String?
  subtotal          Decimal           @db.Decimal(10, 2)
  discount          Decimal           @default(0) @db.Decimal(10, 2)
  tax               Decimal           @default(0) @db.Decimal(10, 2)
  total             Decimal           @db.Decimal(10, 2)
  paymentMethod     PaymentMethod
  amountPaid        Decimal           @db.Decimal(10, 2)
  change            Decimal           @default(0) @db.Decimal(10, 2)
  status            TransactionStatus @default(pending)
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  items TransactionItem[]

  // Indexes
  @@index([transactionNumber])
  @@index([customerName])
  @@index([customerPhone])
  @@index([paymentMethod])
  @@index([status])
  @@index([createdAt])
  @@map("transactions")
}

model TransactionItem {
  id            String  @id @default(cuid())
  transactionId String
  productId     String
  quantity      Int
  price         Decimal @db.Decimal(10, 2)
  total         Decimal @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete: Restrict)

  // Indexes
  @@index([transactionId])
  @@index([productId])
  @@map("transaction_items")
}

// Enums
enum PaymentMethod {
  cash
  card
  ewallet
  transfer

  @@map("payment_method")
}

enum TransactionStatus {
  pending
  completed
  cancelled

  @@map("transaction_status")
}

// Optional: User management for future expansion
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(cashier)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([role])
  @@map("users")
}

enum UserRole {
  admin
  manager
  cashier

  @@map("user_role")
}

// Optional: Inventory tracking for future expansion
model InventoryLog {
  id        String          @id @default(cuid())
  productId String
  type      InventoryType
  quantity  Int
  reason    String?
  reference String? // Transaction ID, Adjustment ID, etc.
  createdAt DateTime        @default(now())
  createdBy String?

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([productId])
  @@index([type])
  @@index([createdAt])
  @@map("inventory_logs")
}

enum InventoryType {
  sale
  purchase
  adjustment
  return

  @@map("inventory_type")
}
